package main
import "fmt"

func main() {
/*
  // Работа с масивомм
  var arr = New_Array() // Создаём новый массив
  for i := 0; i < 10; i++ { // Добавляем элементы в массив
    arr.Add(i+5)
  }
  fmt.Println(arr.Get(1)) // Получаем элемент по индексу 1
  fmt.Println(arr.Get(7)) // Получаем элемент по индексу 7
  fmt.Println(arr.Get(4)) // Получаем элемент по индексу 4
  for i := 0; i < 10; i++ { // Заменяем элементы в массиве
  arr.Set(i, i)
  }
  fmt.Println(arr.Len()) // Получаем текущую длинну массива



  // Работа с Односвязным списком 
  var list = New_LinkedList(0) // Создаём новый список
  fmt.Println("Длинна списка", list.Len()) // Получаем текущую длинну массива
  for i := 0; i < 10; i++ { // Добавляем элементы в список
  list.Add(i+1)
  }
  fmt.Println("список : ", ) 
  list.sprint()
  fmt.Println("Поиск по индексу 1", list.Get(1).data) // Получаем элемент по индексу 1
  fmt.Println("Поиск по индексу 3", list.Get(3).data) // Получаем элемент по индексу 3
  for i := 0; i < 11; i++ {
  list.Set(i, i+2) // Заменяем элементы в списоке
  }
  fmt.Println("Длинна массива", list.Len()) // Получаем текущую длинну массива
  fmt.Println("массив : ", ) 
  list.sprint() // Выводим массив



  // Работа с Двухсвязным списком 



  // Работа с Очередью



  // Работа с Стеком



  // Работа с Хэш-таблицей
  table := NewHashTable() // Создаём новую хэш-таблицу
  table.Add("яблоко", 2)
  table.Add("апельсин", 5) // Добавляем элементы в хэш-таблицу
  table.Add("банан", 1)
  value, exist := table.Get("яблоко") // Получаем значение по ключу
  if exist {
     fmt.Println("Количество яблок:", value)
  }
  table.Remove("банан")// Удаляем элемент
  _, exist = table.Get("банан") // Проверяем наличие ключа в хэш-таблице
  fmt.Println("Банан существует в хэш-таблице?", exist)
  for _, item := range table.items {
  fmt.Printf("%s: %d\n", item.key, item.value)
  }

  */
  
  // Работа с Бинарным деревом(Полным)
  bt := &BinaryTree{} // Создаём новое бинарное дерево
  bt.Add(5) 
  bt.Add(2)
  bt.Add(7)
  bt.Add(1) // Добавляем элементы в бинарное дерево
  bt.Add(3)
  bt.Add(6)
  bt.Add(8)
  fmt.Println("Дерево до удаления элемента:") // Выводим элементы дерева в порядке возрастания
  printInOrder(bt.Root)
  bt.Remove(2) // Удаляем элемент из дерева
  fmt.Println("Дерево после удаления элемента:") 
  printInOrder(bt.Root) // Выводим элементы дерева после удаления элемента
}